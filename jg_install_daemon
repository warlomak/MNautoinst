#if 0
	shc Version 3.8.9b, Generic Script Compiler
	Copyright (c) 1994-2015 Francisco Rosales <frosal@fi.upm.es>

	shc -v -r -T -f ./jg_install_daemon.sh 
#endif

static  char data [] = 
#define      xecc_z	15
#define      xecc	((&data[3]))
	"\134\132\325\053\056\303\054\065\017\321\021\327\267\137\252\163"
	"\202\132\131\222"
#define      opts_z	1
#define      opts	((&data[20]))
	"\210"
#define      lsto_z	1
#define      lsto	((&data[21]))
	"\057"
#define      chk1_z	22
#define      chk1	((&data[23]))
	"\312\352\160\141\357\011\112\051\051\005\201\267\305\305\204\367"
	"\075\122\374\210\261\256\014"
#define      inlo_z	3
#define      inlo	((&data[45]))
	"\203\267\105"
#define      msg2_z	19
#define      msg2	((&data[48]))
	"\302\001\130\334\347\135\263\302\166\122\172\321\146\151\114\227"
	"\025\174\155\100\201"
#define      rlax_z	1
#define      rlax	((&data[69]))
	"\125"
#define      text_z	2794
#define      text	((&data[341]))
	"\221\373\304\354\320\035\177\225\274\247\370\161\011\221\274\064"
	"\133\020\160\014\254\223\232\354\025\070\377\044\352\142\214\173"
	"\136\120\150\056\155\347\304\052\216\275\234\230\116\130\314\252"
	"\150\075\267\025\321\121\002\347\211\002\013\163\144\230\357\303"
	"\350\127\362\125\077\266\200\316\164\034\147\303\164\064\155\335"
	"\161\044\363\103\165\366\052\377\370\066\163\134\316\143\040\266"
	"\273\022\014\373\311\214\311\075\251\061\000\036\145\156\374\327"
	"\222\357\032\010\345\104\010\335\172\174\072\110\337\132\376\232"
	"\155\012\225\066\227\137\164\100\220\164\136\365\342\132\315\165"
	"\112\347\176\060\053\207\015\245\003\110\356\342\243\355\175\020"
	"\370\022\107\217\161\273\320\002\060\057\370\023\211\305\211\324"
	"\254\010\004\330\217\022\176\222\132\154\164\376\131\361\016\121"
	"\004\126\341\166\021\261\170\102\340\161\125\152\066\336\076\343"
	"\347\103\273\166\125\072\010\260\246\175\256\000\157\275\121\163"
	"\023\063\352\045\344\143\147\304\324\275\057\013\234\155\356\203"
	"\260\252\371\006\344\001\266\212\177\144\213\356\041\335\142\065"
	"\020\115\132\364\260\301\271\204\176\350\217\032\125\176\235\220"
	"\350\217\133\352\125\207\126\346\033\327\303\177\014\361\054\133"
	"\235\317\321\004\200\237\074\011\364\135\341\103\053\063\303\160"
	"\250\107\114\342\304\023\142\152\230\236\304\301\345\065\113\105"
	"\331\373\363\203\056\064\021\306\115\263\375\376\013\263\171\135"
	"\263\353\064\104\140\333\227\255\324\323\256\211\035\171\205\000"
	"\206\053\141\110\374\215\322\044\241\105\142\027\127\126\266\031"
	"\066\033\114\303\257\105\357\007\373\156\367\171\261\331\210\357"
	"\111\046\027\215\253\065\122\007\064\304\213\001\165\065\332\024"
	"\165\125\023\330\104\024\251\271\105\372\332\273\326\152\216\052"
	"\341\012\253\153\343\266\057\316\140\260\212\044\177\126\175\064"
	"\065\245\201\351\045\004\115\263\234\034\003\073\041\220\162\346"
	"\315\042\161\275\035\204\222\060\173\003\020\271\270\023\336\235"
	"\021\237\126\121\012\226\053\246\205\043\212\332\010\211\216\317"
	"\331\171\206\233\343\275\222\173\371\014\060\116\063\114\070\211"
	"\242\024\026\052\223\114\325\264\031\324\003\022\205\365\164\120"
	"\135\065\025\062\202\212\170\231\212\331\260\336\001\204\122\241"
	"\331\356\167\357\046\150\052\123\215\103\106\176\070\364\301\004"
	"\206\313\141\242\164\250\052\344\050\207\246\021\131\366\020\175"
	"\017\202\375\053\335\032\263\051\323\045\017\141\214\342\330\203"
	"\112\133\046\333\200\167\355\165\017\217\062\121\072\105\035\212"
	"\365\244\105\124\024\030\162\016\211\267\361\026\325\206\112\366"
	"\375\122\101\226\104\076\162\145\305\235\235\276\346\322\102\161"
	"\366\051\152\203\243\277\155\351\377\005\130\311\227\260\306\035"
	"\117\035\065\226\263\262\372\300\334\001\147\312\072\213\135\313"
	"\330\065\270\144\003\124\344\311\256\076\226\216\001\335\312\315"
	"\225\257\154\003\040\120\304\370\210\322\125\140\320\052\266\142"
	"\325\105\207\324\354\001\224\315\375\136\106\022\352\211\007\347"
	"\157\007\127\344\321\143\377\351\044\132\063\344\167\202\210\343"
	"\314\212\154\233\150\101\014\355\041\074\270\241\333\203\005\346"
	"\277\227\307\062\120\166\123\376\365\157\132\341\155\230\030\147"
	"\137\071\136\067\164\304\070\230\224\216\333\156\044\266\030\127"
	"\022\353\340\200\114\032\261\264\246\164\247\015\235\260\314\072"
	"\132\102\041\203\245\314\354\154\050\210\272\312\326\020\150\034"
	"\152\035\202\212\251\326\012\135\032\320\320\201\173\332\110\234"
	"\123\035\161\004\315\164\376\334\152\112\351\315\056\113\320\252"
	"\204\257\225\072\312\336\327\307\100\377\024\045\331\105\042\301"
	"\324\164\163\232\315\023\254\324\252\065\352\071\013\307\006\366"
	"\075\106\374\243\262\031\257\174\350\053\373\165\371\321\254\224"
	"\113\242\043\070\032\336\250\205\026\172\164\055\347\174\144\272"
	"\036\306\116\322\253\114\363\272\001\003\357\007\304\206\031\157"
	"\347\173\023\305\034\057\233\376\317\130\261\245\047\100\032\213"
	"\115\354\346\175\371\147\176\257\173\141\064\172\313\000\244\025"
	"\052\207\337\311\167\323\203\362\155\175\173\345\040\322\345\015"
	"\347\116\235\215\363\172\050\230\372\002\155\335\072\200\163\373"
	"\102\105\077\241\055\020\122\003\141\051\345\016\206\247\120\043"
	"\155\155\146\011\350\114\361\142\164\077\111\141\114\070\020\063"
	"\053\042\170\262\164\130\215\156\066\253\200\357\264\344\170\353"
	"\134\354\006\005\045\320\233\275\151\126\347\046\343\202\053\233"
	"\032\014\173\154\152\273\352\331\022\313\270\252\171\043\363\302"
	"\230\301\136\064\345\054\140\067\263\045\330\314\252\170\314\022"
	"\023\320\254\066\147\003\013\262\275\134\050\274\275\372\156\274"
	"\271\024\022\114\351\072\104\346\206\366\336\337\351\165\055\037"
	"\256\164\212\157\371\340\214\041\361\217\136\050\217\040\253\100"
	"\251\335\014\215\030\250\151\346\211\204\225\153\312\235\237\312"
	"\237\100\335\205\353\277\047\244\055\302\044\342\256\335\172\024"
	"\233\115\121\162\263\062\152\342\160\375\045\170\362\322\043\357"
	"\057\011\057\023\024\356\277\005\146\040\141\161\376\371\331\254"
	"\042\005\344\263\027\142\143\216\114\263\125\213\141\300\015\127"
	"\002\323\066\075\335\271\063\272\152\031\213\222\344\364\140\362"
	"\034\222\012\240\371\370\023\222\043\064\070\335\164\316\002\255"
	"\073\200\055\042\015\171\162\300\072\174\354\060\101\221\070\344"
	"\255\070\155\142\117\072\112\255\233\314\155\112\140\112\037\167"
	"\325\214\212\233\042\024\007\170\012\016\246\142\041\032\113\256"
	"\374\332\240\065\221\174\324\063\150\025\243\203\044\343\362\234"
	"\306\243\030\365\322\153\123\216\060\023\131\213\176\241\255\352"
	"\361\350\063\102\257\331\050\047\324\367\147\046\374\252\346\263"
	"\173\121\345\067\153\024\041\055\351\115\134\110\277\165\251\202"
	"\337\137\265\021\032\154\350\370\222\020\024\320\213\330\101\352"
	"\206\166\317\250\237\215\346\167\034\300\151\013\234\331\314\214"
	"\241\265\342\331\136\324\107\035\165\370\172\053\265\044\231\327"
	"\305\135\070\361\051\377\226\334\125\101\012\306\270\066\164\077"
	"\254\173\303\210\005\110\013\246\043\042\336\050\262\277\021\310"
	"\073\070\206\175\236\022\114\020\127\332\225\137\247\322\266\101"
	"\166\005\234\323\150\002\134\321\032\264\111\167\264\310\342\365"
	"\076\265\344\346\241\157\223\135\034\277\237\303\002\343\167\106"
	"\126\260\365\157\263\276\346\266\150\167\313\033\022\300\067\151"
	"\116\041\213\316\103\134\036\074\214\176\122\336\341\311\163\050"
	"\100\315\167\327\007\153\023\216\011\151\110\105\000\237\333\311"
	"\152\206\203\121\317\233\203\225\324\312\320\347\227\305\333\004"
	"\371\014\227\177\375\226\210\073\230\266\213\046\227\313\071\301"
	"\013\272\072\236\147\223\044\001\321\066\172\125\072\136\260\377"
	"\306\216\200\270\215\200\103\362\331\136\212\175\257\161\161\161"
	"\103\265\346\136\205\343\311\374\154\314\075\250\274\257\022\114"
	"\350\251\304\276\317\165\127\135\054\017\204\006\353\057\311\373"
	"\262\105\374\340\262\061\002\022\352\212\022\242\125\177\240\115"
	"\124\176\223\007\012\131\000\320\043\216\101\022\352\020\170\361"
	"\251\134\152\143\207\336\367\024\206\003\273\264\150\352\257\262"
	"\014\021\026\204\021\112\046\345\005\162\223\371\075\167\140\314"
	"\346\377\103\165\120\340\215\127\322\015\203\304\344\141\105\210"
	"\150\114\307\112\275\066\163\306\144\335\071\042\036\071\151\206"
	"\336\272\155\157\221\164\360\215\311\136\046\302\100\123\244\306"
	"\066\132\041\077\353\031\076\026\053\201\006\010\374\327\344\076"
	"\335\245\216\122\334\321\210\205\132\220\177\134\072\154\272\266"
	"\130\004\037\115\075\244\372\270\140\127\345\335\224\250\367\114"
	"\171\217\371\145\170\307\365\373\354\337\044\162\221\352\360\372"
	"\337\021\347\365\163\315\162\104\016\021\225\001\006\326\243\315"
	"\145\066\243\007\230\072\325\155\363\114\031\222\203\022\142\165"
	"\350\007\023\003\264\241\142\144\260\341\247\155\212\122\044\072"
	"\237\363\023\016\365\206\177\005\104\265\270\074\211\374\302\050"
	"\072\364\304\357\236\303\252\003\240\124\150\004\003\353\131\320"
	"\336\200\366\304\370\064\356\254\132\336\131\116\275\312\361\164"
	"\223\311\213\360\122\327\077\001\171\315\166\072\101\126\136\365"
	"\022\063\207\264\201\030\245\030\252\107\321\152\031\265\027\354"
	"\013\151\240\044\277\077\034\224\326\327\217\140\077\334\115\327"
	"\216\102\200\046\270\331\317\207\060\347\252\221\064\164\154\171"
	"\134\113\003\303\223\331\254\057\007\155\023\133\022\233\250\204"
	"\113\006\374\320\017\270\100\342\112\372\220\165\174\207\221\131"
	"\335\211\306\314\056\066\243\241\346\030\317\170\017\333\007\142"
	"\112\046\241\114\354\276\211\352\157\077\060\163\160\130\344\127"
	"\145\007\351\243\233\051\364\336\025\344\337\162\363\220\230\247"
	"\376\120\112\230\342\232\206\270\341\355\333\351\136\357\157\325"
	"\201\214\142\314\072\164\111\227\141\073\120\141\331\140\327\373"
	"\207\361\337\161\363\375\007\215\217\241\067\125\202\240\365\022"
	"\023\036\043\020\014\310\030\023\312\023\206\267\065\006\112\125"
	"\371\106\334\263\113\170\243\025\007\271\027\376\012\015\245\104"
	"\117\164\124\211\022\043\204\337\201\277\304\150\174\310\043\261"
	"\324\350\231\144\264\226\153\215\205\356\065\334\252\276\350\012"
	"\051\300\045\076\167\230\322\271\236\145\100\203\243\311\205\210"
	"\063\157\353\244\052\305\372\357\141\033\302\270\107\034\106\065"
	"\142\220\302\103\345\002\156\033\254\254\237\161\173\057\255\044"
	"\022\331\147\061\326\261\164\371\301\362\325\165\157\170\215\333"
	"\020\054\145\037\065\363\164\065\116\245\042\047\104\342\254\235"
	"\367\312\074\017\345\352\126\270\357\067\043\175\171\067\312\224"
	"\337\301\034\047\324\113\121\330\235\377\221\021\063\072\277\052"
	"\327\231\303\302\322\103\264\167\112\216\342\253\340\245\133\043"
	"\146\113\270\101\047\372\077\232\175\014\214\347\176\061\176\324"
	"\324\204\012\271\015\363\146\013\110\241\172\211\275\146\146\151"
	"\373\175\366\021\250\322\173\231\022\120\013\144\226\013\377\350"
	"\264\057\262\147\207\232\311\127\306\257\070\254\054\106\070\066"
	"\262\013\011\205\170\167\305\321\307\040\003\333\150\230\075\326"
	"\054\304\277\247\303\237\222\351\326\267\322\302\014\024\236\162"
	"\323\044\355\357\243\051\124\141\232\172\322\110\152\210\343\155"
	"\112\027\250\235\140\356\344\240\222\101\073\206\017\013\234\247"
	"\156\347\250\013\157\221\270\040\042\222\323\025\052\107\115\373"
	"\217\154\051\146\163\106\100\112\331\217\144\027\327\063\111\264"
	"\305\042\175\261\134\365\175\344\326\071\164\331\374\121\056\121"
	"\321\266\272\322\013\222\007\071\106\257\000\016\201\150\353\040"
	"\360\116\063\347\052\315\363\122\161\331\203\371\134\106\355\273"
	"\361\211\363\003\337\073\076\050\015\213\334\030\163\052\123\072"
	"\217\354\203\117\300\022\122\203\171\270\031\320\040\070\306\312"
	"\303\336\252\307\170\253\306\306\257\262\323\245\200\334\213\277"
	"\257\170\222\151\161\345\076\161\357\360\305\354\023\031\344\347"
	"\113\205\165\362\030\071\005\073\044\171\104\325\164\256\345\072"
	"\303\207\136\300\304\331\166\146\145\053\234\247\201\305\031\123"
	"\303\001\375\011\173\312\347\307\230\002\032\340\376\147\013\046"
	"\246\042\111\211\007\263\037\161\040\132\064\352\144\003\252\012"
	"\177\366\273\136\277\041\053\365\357\324\017\346\254\204\034\242"
	"\253\132\133\203\007\213\322\051\165\250\236\207\000\341\227\264"
	"\140\205\256\010\353\330\113\326\301\335\246\110\016\040\115\312"
	"\115\307\107\375\052\262\031\026\022\113\252\323\354\027\345\012"
	"\241\375\250\037\042\036\011\127\227\063\162\103\120\042\270\033"
	"\047\115\001\243\044\272\215\315\024\117\150\201\340\020\145\157"
	"\160\134\074\141\056\363\317\104\375\263\353\030\375\021\142\167"
	"\236\365\076\314\352\050\312\374\047\341\352\130\325\022\213\230"
	"\174\156\334\316\107\356\023\350\227\267\206\063\322\165\306\252"
	"\340\102\010\237\235\050\073\114\375\061\067\234\007\366\330\255"
	"\376\224\015\317\104\317\246\301\057\246\216\026\145\207\367\106"
	"\043\010\216\115\360\247\125\037\103\376\350\011\261\344\170\207"
	"\002\036\045\235\257\206\153\110\075\326\344\361\100\204\350\312"
	"\143\176\260\165\352\024\123\226\133\023\365\157\142\362\016\034"
	"\221\075\174\116\335\207\315\172\136\362\346\245\104\161\041\011"
	"\077\131\073\213\371\043\167\017\032\047\350\363\206\221\310\163"
	"\101\064\043\116\362\253\207\135\266\173\211\173\057\325\205\366"
	"\023\161\204\143\314\340\102\305\177\036\206\311\244\333\042\022"
	"\251\062\254\306\273\041\314\127\003\331\167\072\345\053\256\016"
	"\341\312\321\353\046\064\337\033\201\275\146\061\225\023\301\051"
	"\333\214\240\344\121\233\157\302\363\143\246\064\213\024\070\151"
	"\222\127\164\176\217\137\271\114\011\140\100\215\230\301\264\144"
	"\137\165\076\163\125\014\335\116\374\332\363\005\331\163\162\134"
	"\131\310\076\023\004\324\200\261\250\250\341\302\310\270\124\163"
	"\072\110\247\372\145\266\315\261\072\163\041\231\265\366\075\130"
	"\107\247\231\033\301\123\330\177\054\224\232\062\001\044\257\350"
	"\362\077\362\030\372\300\045\042\173\371\214\061\265\232\317\106"
	"\212\143\127\261\303\362\277\165\326\217\071\250\005\023\265\110"
	"\060\016\314\343\101\223\270\237\055\006\050\227\015\015\230\303"
	"\230\030\050\043\007\112\000\151\177\020\267\331\004\147\233\275"
	"\354\031\246\174\064\374\372\322\002\043\151\020\060\002\324\311"
	"\032\374\354\041\106\354\213\306\374\103\237\001\252\073\277\227"
	"\124\145\023\211\141\016\133\144\062\305\164\143\307\110\054\342"
	"\105\030\004\214\005\220\122\002\323\362\003\175\055\303\025\202"
	"\050\050\013\212\067\147\356\151\055\143\314\365\254\371\327\361"
	"\021\333\175\027\154\317\031\077\302\035\275\357\340\322\161\011"
	"\372\175\223\062\345\202\233\022\346\150\007\222\142\337\203\163"
	"\273\001\213\047\321\244\146\223\301\043\202\242\365\364\253\360"
	"\162\077\042\127\302\276\151\250\047\161\072\211\120\276\375\013"
	"\277\210\063\220\054\231\043\356\274\246\221\262\232\075\242\014"
	"\174\305\144\076\203\316\347\253\077\041\064\220\337\061\234\236"
	"\271\317\056\346\150\122\325\045\370\146\330\223\243\173\240\040"
	"\100\004\137\304\322\106\157\022\147\244\242\107\325\077\346\217"
	"\016\025\166\167\147\114\235\137\262\165\363\126\360\223\167\061"
	"\227\326\365\151\035\145\173\204\011\036\314\337\135\262\156\154"
	"\307\345\344\056\061\201\216\344\367\201\073\350\025\262\031\254"
	"\211\017"
#define      msg1_z	42
#define      msg1	((&data[3423]))
	"\222\053\176\260\367\136\016\064\000\112\122\357\370\014\350\045"
	"\366\346\267\163\205\324\360\273\313\246\231\221\130\126\210\147"
	"\120\247\004\232\021\370\070\370\060\141\231\101\045\157\327\146"
	"\050\251\315\173\161\262"
#define      tst1_z	22
#define      tst1	((&data[3473]))
	"\341\056\310\007\140\161\074\025\250\207\200\014\044\017\163\172"
	"\072\224\137\327\074\153\027\110\270\331\260\003\301\305"
#define      tst2_z	19
#define      tst2	((&data[3504]))
	"\076\352\210\345\006\010\127\117\044\012\161\047\074\121\263\260"
	"\100\251\024\360\312\274\271\137\032"
#define      pswd_z	256
#define      pswd	((&data[3581]))
	"\007\073\332\261\010\125\042\273\265\302\237\226\361\147\160\242"
	"\152\061\150\040\014\332\137\367\142\104\126\175\124\064\111\134"
	"\160\043\015\171\170\060\064\056\362\323\305\344\073\065\206\246"
	"\147\356\306\163\310\046\152\053\260\134\076\222\250\237\340\244"
	"\335\374\117\142\000\247\115\145\336\057\347\370\250\213\245\323"
	"\126\204\364\155\276\045\357\157\202\056\001\053\315\342\317\253"
	"\337\037\015\337\306\133\105\245\212\054\235\063\270\102\007\016"
	"\307\373\173\206\041\153\365\244\231\367\317\147\332\237\022\271"
	"\276\040\231\205\173\336\053\006\012\310\071\302\013\101\321\322"
	"\074\115\131\136\270\116\002\122\105\322\271\040\161\313\331\060"
	"\354\162\265\150\120\340\156\133\251\250\036\264\352\357\207\046"
	"\074\340\205\365\056\210\107\164\132\001\224\313\315\156\373\271"
	"\340\261\041\061\222\220\215\074\071\253\360\043\233\167\112\330"
	"\127\317\315\206\130\025\373\262\026\220\175\343\376\171\235\337"
	"\053\277\021\276\117\236\372\211\112\352\254\345\142\367\275\272"
	"\307\213\101\037\241\075\321\270\315\117\234\314\311\071\254\365"
	"\370\275\263\110\134\255\321\246\230\176\214\372\165\112\265\075"
	"\325\366\134\166\063\056\056\001\176\313\316\107\004\172\074\374"
	"\070\360\105\224\235\026\073\066\224\307\061\012\021\346\107\347"
	"\335\244\136\020\322\215\022\120\153\301\251\277\365\362\034\145"
	"\026\051\336\217\132\023\275\115\346\203\061\042\270\270\310\037"
	"\246\217\223\157\265\376\233\040\277\105\340\265\070\374\032\116"
	"\046\371\336\201\014\233\316\362\036\377\025"
#define      chk2_z	19
#define      chk2	((&data[3891]))
	"\367\136\154\050\273\207\011\033\311\365\034\253\162\042\131\207"
	"\067\305\051\252\377\101\212\316\042\211"
#define      date_z	1
#define      date	((&data[3914]))
	"\251"
#define      shll_z	8
#define      shll	((&data[3915]))
	"\014\323\044\325\274\321\371\040\347\040"/* End of data[] */;
#define      hide_z	4096
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask  = (unsigned long)&chkenv;
	mask ^= (unsigned long)getpid() * ~mask;
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

#if !defined(TRACEABLE)

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
#	define PTRACE_ATTACH	PT_ATTACH
#endif
void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PTRACE_ATTACH, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !defined(TRACEABLE) */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];

	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	ret = chkenv(argc);
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
	varg[j++] = argv[0];		/* My own name at execution */
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if !defined(TRACEABLE)
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
